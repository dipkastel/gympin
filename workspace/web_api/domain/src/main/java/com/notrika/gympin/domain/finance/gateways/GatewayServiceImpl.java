package com.notrika.gympin.domain.finance.gateways;


import com.notrika.gympin.common.finance.IncreaseCorporateDeposit.param.RequestIncreaseCorporateDepositParam;
import com.notrika.gympin.common.finance.gateway.AutoGenerated.ClientSaleRequestData;
import com.notrika.gympin.common.finance.gateway.AutoGenerated.ClientSaleResponseData;
import com.notrika.gympin.common.finance.gateway.dto.BankStaff;
import com.notrika.gympin.common.finance.gateway.dto.GatewaysDto;
import com.notrika.gympin.common.finance.gateway.param.GatewaysParam;
import com.notrika.gympin.common.finance.gateway.query.GatewayQuery;
import com.notrika.gympin.common.finance.gateway.service.GatewayService;
import com.notrika.gympin.common.settings.context.GympinContext;
import com.notrika.gympin.common.settings.context.GympinContextHolder;
import com.notrika.gympin.common.util.ApplicationEnum;
import com.notrika.gympin.common.util.GeneralUtil;
import com.notrika.gympin.common.util.exception.BadRequestRunTimeMessage;
import com.notrika.gympin.common.util.exception.transactions.GatewayIsNotAvalable;
import com.notrika.gympin.domain.AbstractBaseService;
import com.notrika.gympin.domain.finance.gateways.parsian.ParsianGatewayBankServiceImpl;
import com.notrika.gympin.domain.util.convertor.GatewayConvertor;
import com.notrika.gympin.persistence.dao.repository.finance.FinanceGatewayRepository;
import com.notrika.gympin.persistence.dao.repository.multimedia.MultimediaRepository;
import com.notrika.gympin.persistence.entity.finance.FinanceSerialEntity;
import com.notrika.gympin.persistence.entity.finance.gateway.FinanceApplicationGatewayEntity;
import com.notrika.gympin.persistence.entity.finance.gateway.FinanceGatewayEntity;
import com.notrika.gympin.persistence.entity.multimedia.MultimediaEntity;
import com.notrika.gympin.persistence.entity.user.UserEntity;
import lombok.NonNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class GatewayServiceImpl extends AbstractBaseService<GatewaysParam, GatewaysDto, GatewayQuery, FinanceGatewayEntity> implements GatewayService {

    @Autowired
    FinanceGatewayRepository financeGatewayRepository;

    @Autowired
    MultimediaRepository multimediaRepository;
    @Autowired
    ParsianGatewayBankServiceImpl parsianGatewayBankServiceImpl;


    @Override
    public GatewaysDto add(@NonNull GatewaysParam param) {
        FinanceGatewayEntity entity = FinanceGatewayEntity.builder()
                .name(param.getName())
                .description(param.getDescription())
                .gatewayType(param.getGatewayType())
                .password(param.getPassword())
                .token(param.getToken())
                .serial(param.getSerial())
                .data1(param.getData1())
                .data2(param.getData2())
                .data3(param.getData3())
                .build();
        return GatewayConvertor.toDto(add(entity));
    }

    @Override
    public GatewaysDto update(@NonNull GatewaysParam param) {
        FinanceGatewayEntity entity = financeGatewayRepository.getById(param.getId());
        entity.setName(param.getName());
        entity.setGatewayType(param.getGatewayType());
        entity.setDescription(param.getDescription());
        entity.setPassword(param.getPassword());
        entity.setToken(param.getToken());
        entity.setSerial(param.getSerial());
        entity.setData1(param.getData1());
        entity.setData2(param.getData2());
        entity.setData3(param.getData3());
        return GatewayConvertor.toDto(update(entity));
    }

    @Override
    public GatewaysDto delete(@NonNull GatewaysParam param) {
        FinanceGatewayEntity entity = financeGatewayRepository.getById(param.getId());
        return GatewayConvertor.toDto(delete(entity));
    }

    @Override
    public FinanceGatewayEntity add(FinanceGatewayEntity entity) {
        return financeGatewayRepository.add(entity);
    }

    @Override
    public FinanceGatewayEntity update(FinanceGatewayEntity entity) {
        return financeGatewayRepository.update(entity);
    }

    @Override
    public FinanceGatewayEntity delete(FinanceGatewayEntity entity) {
        return financeGatewayRepository.deleteById2(entity);
    }

    @Override
    public FinanceGatewayEntity getEntityById(long id) {
        return financeGatewayRepository.findById(id).get();
    }


    @Override
    public List<FinanceGatewayEntity> getAll(Pageable pageable) {
        return financeGatewayRepository.findAllUndeleted(pageable);
    }

    @Override
    public Page<FinanceGatewayEntity> findAll(Specification<FinanceGatewayEntity> specification, Pageable pageable) {
        return financeGatewayRepository.findAll(specification, pageable);
    }

    @Override
    public List<GatewaysDto> convertToDtos(List<FinanceGatewayEntity> entities) {
        return entities.stream().map(GatewayConvertor::toDto).collect(Collectors.toList());
    }

    @Override
    public Page<GatewaysDto> convertToDtos(Page<FinanceGatewayEntity> entities) {
        return entities.map(GatewayConvertor::toDto);
    }

    @Override
    public GatewaysDto getById(long id) {
        return GatewayConvertor.toDto(getEntityById(id));
    }

    @Override
    public GatewaysDto updateImage(GatewaysParam param) throws Exception {
        MultimediaEntity image = multimediaRepository.getById(param.getMultimediaId());
        if (image.getGateway() != null)
            throw new Exception("image used for other gateway");
        FinanceGatewayEntity entity = financeGatewayRepository.getById(param.getId());
        entity.setGatewayImage(image);
        return GatewayConvertor.toDto(update(entity));
    }

    public BankStaff generateBankStaff(FinanceApplicationGatewayEntity applicationGateway, ApplicationEnum application, BigDecimal amount, FinanceSerialEntity serial) {
        BankStaff bankStaff = new BankStaff();
        UserEntity user = (UserEntity) GympinContextHolder.getContext().getEntry().get(GympinContext.USER_KEY);


        switch (applicationGateway.getGateway().getData1()) {
            case "PARSIAN": {
                //Parsian
                bankStaff.setBankName("پارسیان");
                String callbackUrl = "https://api.gympin.ir/v1/Gateway/PersianCallbackMethod?ref=" + application;
                ClientSaleRequestData requestData = new ClientSaleRequestData();
                requestData.setOrderId(GeneralUtil.UnifyOrderId(serial.getId()));
                requestData.setAmount(amount.longValue() * 10);
                requestData.setCallBackUrl(callbackUrl);
                requestData.setAdditionalData(serial.getSerial());
                requestData.setOriginator(user.getPhoneNumber());
                requestData.setLoginAccount(applicationGateway.getGateway().getPassword());
                ClientSaleResponseData gatwayresult = null;
                try {
                    gatwayresult = parsianGatewayBankServiceImpl.salePaymentRequest(requestData);
                } catch (Exception e) {
                    throw new GatewayIsNotAvalable();
                }
                if (gatwayresult == null) {
                    throw new GatewayIsNotAvalable();
                } else if (gatwayresult.getStatus() == 0 && gatwayresult.getToken() > 0) {
                    bankStaff.setReference("پرداخت از درگاه" + bankStaff.getBankName() + " - توکن بانک " + gatwayresult.getToken());
                    bankStaff.setUrl("https://pec.shaparak.ir/NewIPG/?token=" + gatwayresult.getToken());
                } else if (gatwayresult.getMessage() != null) {
                    throw new BadRequestRunTimeMessage(gatwayresult.getMessage());
                } else {
                    throw new GatewayIsNotAvalable();
                }

            }
            break;
            case "MELLAT":
                throw new GatewayIsNotAvalable();
            default: {
                throw new GatewayIsNotAvalable();

            }
        }
        return bankStaff;

    }
}
