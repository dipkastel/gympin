package com.notrika.gympin.domain.gateways.parsian;


import com.notrika.gympin.common.gateway.parsian.AutoGenerated.*;
import com.notrika.gympin.common.gateway.parsian.service.gatewayParsianService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.oxm.jaxb.Jaxb2Marshaller;
import org.springframework.stereotype.Service;
import org.springframework.ws.client.WebServiceClientException;
import org.springframework.ws.client.core.WebServiceTemplate;
import org.springframework.ws.client.support.interceptor.ClientInterceptor;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.soap.saaj.SaajSoapMessage;

@Service
public class ParsianGatewayServiceImpl implements gatewayParsianService {


    @Autowired
    Jaxb2Marshaller marshaller;

    public ClientSaleResponseData salePaymentRequest(ClientSaleRequestData requestData) {
        WebServiceTemplate template = getTemplate("https://pec.shaparak.ir/NewIPGServices/Sale/SaleService.asmx");
        String requestUrl = "https://pec.Shaparak.ir/NewIPGServices/Sale/SaleService/SalePaymentRequest";
        ObjectFactory factory = new ObjectFactory();
        SalePaymentRequest request = factory.createSalePaymentRequest();
        request.setRequestData(requestData);
        template.setInterceptors(new ClientInterceptor[]  {GetInterceptor(requestUrl)} );
        SalePaymentRequestResponse response = (SalePaymentRequestResponse) template.marshalSendAndReceive(request);
        return response.getSalePaymentRequestResult();
    }

    public ClientConfirmResponseData confirmPaymentRequest(ClientConfirmRequestData requestData) {
        WebServiceTemplate template = getTemplate("https://pec.shaparak.ir/NewIPGServices/Confirm/ConfirmService.asmx");
        String requestUrl = "https://pec.Shaparak.ir/NewIPGServices/Confirm/ConfirmService/ConfirmPayment";
        ObjectFactory factory = new ObjectFactory();
        ConfirmPayment request = factory.createConfirmPayment();
        request.setRequestData(requestData);
        template.setInterceptors(new ClientInterceptor[]  {GetInterceptor(requestUrl)} );
        ConfirmPaymentResponse response = (ConfirmPaymentResponse) template.marshalSendAndReceive(request);
        return response.getConfirmPaymentResult();
    }

    private WebServiceTemplate getTemplate(String uri) {
        WebServiceTemplate template = new WebServiceTemplate();
        template.setMarshaller(marshaller);
        template.setUnmarshaller(marshaller);
        template.setDefaultUri(uri);
        return template;
    }

    private ClientInterceptor GetInterceptor(final String action) {
        return new ClientInterceptor() {
            @Override
            public boolean handleRequest(MessageContext messageContext) throws WebServiceClientException {
                SaajSoapMessage soapMessage = (SaajSoapMessage) messageContext.getRequest();
                soapMessage.setSoapAction(action);
                return true;
            }

            @Override
            public boolean handleResponse(MessageContext messageContext) throws WebServiceClientException {
                return false;
            }

            @Override
            public boolean handleFault(MessageContext messageContext) throws WebServiceClientException {
                return false;
            }

            @Override
            public void afterCompletion(MessageContext messageContext, Exception ex) throws WebServiceClientException {

            }
        };
    }

}
