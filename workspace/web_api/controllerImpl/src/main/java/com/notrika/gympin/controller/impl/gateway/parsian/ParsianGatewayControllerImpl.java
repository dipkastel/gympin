package com.notrika.gympin.controller.impl.gateway.parsian;

import com.notrika.gympin.common.annotation.IgnoreWrapAspect;
import com.notrika.gympin.common.exception.transactions.GatewayIsNotAvalable;
import com.notrika.gympin.common.exception.transactions.TransactionAlreadyChecked;
import com.notrika.gympin.common.exception.transactions.TransactionNotFound;
import com.notrika.gympin.common.exception.transactions.unknownPaymentBuyer;
import com.notrika.gympin.common.gateway.parsian.AutoGenerated.ClientConfirmRequestData;
import com.notrika.gympin.common.gateway.parsian.AutoGenerated.ClientConfirmResponseData;
import com.notrika.gympin.common.gateway.parsian.AutoGenerated.ConfirmPayment;
import com.notrika.gympin.common.gateway.parsian.api.ParsianGatewayController;
import com.notrika.gympin.common.gateway.parsian.param.GatewayCallbackParam;
import com.notrika.gympin.common.gateway.parsian.service.gatewayParsianService;
import com.notrika.gympin.common.transaction.dto.TransactionDto;
import com.notrika.gympin.common.transaction.param.CheckPaymentParam;
import com.notrika.gympin.common.transaction.param.TransactionParam;
import com.notrika.gympin.common.transaction.service.TransactionService;
import com.notrika.gympin.common.util.GeneralUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.http.HttpServletRequest;
import java.util.Collection;
import java.util.Map;

@Slf4j
@Controller
@RequestMapping("/api/v1/parsianGateway")
public class ParsianGatewayControllerImpl implements ParsianGatewayController {


    @Value("${gateway.parsian.terminalId}")
    private String terminalId;

    @Value("${gateway.parsian.password}")
    private String loginAccount;

    @Autowired
    gatewayParsianService gatewayParsianService;

    @Autowired
    TransactionService transactionService;


    @Override
    @PostMapping(path = "/CallbackMethod",
            consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE})
    @IgnoreWrapAspect
    public String CallbackMethod(HttpServletRequest request, Model model, GatewayCallbackParam param, String ref) {

        log.info("CallbackMethod exe for param", param);
        String message = getFailierResult(param.getStatus());
        String additionalMessage ="";
        model.addAttribute("Ref",getRefrence(ref));
        var result = false;
        if (param.getStatus() == 0&& param.getRRN()>0){
            ClientConfirmRequestData requestData = new ClientConfirmRequestData();
            requestData.setLoginAccount(loginAccount);
            requestData.setToken(param.getToken());
            try{
                log.info("CallbackMethod Bank Request ", requestData);
                ClientConfirmResponseData clientConfirmResponseData = gatewayParsianService.confirmPaymentRequest(requestData);
                if(clientConfirmResponseData.getStatus()==0&&clientConfirmResponseData.getRRN()>0){
                    model.addAttribute("RRN",clientConfirmResponseData.getRRN());
                    additionalMessage =
                            " RNN : "+clientConfirmResponseData.getRRN()+"\n"+
                            " Gateway Token : "+clientConfirmResponseData.getToken()+"\n"+
                            " Card Hash : "+clientConfirmResponseData.getCardNumberMasked();
                    result=true;
                }else{
                    message = getFailierResult(clientConfirmResponseData.getStatus());
                }
            }catch (Exception e){
                log.error("CallbackMethod Bank Request Faild", e);
                message = getFailierResult((short) -300);
            }
        }
        try{
            log.info("CallbackMethod CalculatePayment ", result);
            transactionService.CalculatePayment(GeneralUtil.PureOrderId(param.getOrderId()),result,message,additionalMessage);
        }catch (TransactionNotFound e){
            log.error("CallbackMethod CalculatePayment Faild - transactionNotFound", e);
            message = getFailierResult((short) -311)+param.getOrderId();
        }catch (unknownPaymentBuyer e){
            log.error("CallbackMethod CalculatePayment Faild - unknownPaymentBuyer", e);
            message = getFailierResult((short) -312)+param.getOrderId();
        }catch (TransactionAlreadyChecked e){
            log.error("CallbackMethod CalculatePayment Faild - already calculated", e);
            result=false;
            message = getFailierResult((short) -313)+param.getOrderId();
        }catch (Exception e){
            log.error("CallbackMethod CalculatePayment Faild - ex : ", e);
            result = false;
            message = getFailierResult((short) -310)+param.getOrderId();
        }
        model.addAttribute("Message",message);
        model.addAttribute("Result",result);
        return "transactionResult";

    }

    private String getRefrence(String ref) {
        switch (ref){
            case "WEBAPP":return "https://web.gympin.ir/wallet";
            case "WEBCORPORATE":return "https://corporate.gympin.ir/finance";
            case "WEBPLACE":return "https://place.gympin.ir";
            default:return "https://gympin.ir";
        }
    }

    private String getFailierResult(Short status) {
        switch (status){
            case 59:return "عملیات خرید انجام نشد.در صورتی که مبلغ از حساب شما کسر شده، مبلغ کسر شده، حداکثر تا 72 ساعت به حساب  باز می گردد";
            case 0:return "تراکنش با موفقیت انجام شد";
            case -112:return "شناسه سفارش تکراری است. در صورتی که مبلغ از حساب شما کسر شده، مبلغ کسر شده، حداکثر تا 72 ساعت به حساب  باز می گردد";
            case -126:return "درگاه از سمت بانک تایید نشد";
            case -127:return "ip درگاه از سمت بانک تایید نشد";
            case -138:return "انصراف از پرداخت در درگاه";
            case -300:return "تایید تراکنش با خطا مواجه شد.در صورتی که مبلغ از حساب شما کسر شده، مبلغ کسر شده، حداکثر تا 72 ساعت به حساب  باز می گردد";
            case -310:return "خطا در عملیات با پشتیبانی جیم پین تماس بگیرید. کد پیگیری خطا : ";
            case -311:return "تراکنش یافت نشد،کد پیگیری تراکنش : ";
            case -312:return "پرداخت کننده شناسایی نشد. کد پیگیری تراکنش : ";
            case -313:return "تراکنش قبلا محاسبه و مبلغ آن به حساب شما واریز شده. کد پیگیری تراکنش : ";
            default:return "خطا در تکمیل خرید.در صورتی که مبلغ از حساب شما کسر شده، مبلغ کسر شده، حداکثر تا 72 ساعت به حساب  باز می گردد";
        }
    }
}
